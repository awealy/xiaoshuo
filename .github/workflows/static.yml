# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Pages
        uses: actions/configure-pages@v5
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload entire repository
          path: '.'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
                    -名称: 缓存
  用途: 动作/cache@v4.3.0
  与:
    # 要缓存和还原的文件，目录和通配符模式的列表
    路径:
    # 用于恢复和保存缓存的显式键
    密钥:
    # 列出前缀匹配键的有序多行字符串，用于在键未发生缓存命中的情况下恢复陈旧缓存。注意 'cache-hit' 在这种情况下返回false。
    restore-keys: # 可选
    # 上传过程中用于拆分大文件的chunk大小，以字节为单位
    Upload-chunk-size: # 可选
    # 启用时的可选布尔值，允许windows跑步者保存或还原可以分别在其他平台上还原或保存的缓存
    enableCrossOsArchive: # 可选，默认值为false
    # 如果未找到缓存条目，则使工作流失败
    fail-on-cache-miss: # optional，默认值为false
    # 检查给定输入 (键，还原键) 是否存在缓存条目，而无需下载缓存
    仅查找: # 可选，默认值为false
    # 运行post步骤以保存缓存，即使之前的另一个步骤失败
    保存-始终: # 可选，默认为false
          
